plugins {
    id 'java'
    id 'jacoco'
    id 'io.quarkus'
    id "io.freefair.lombok" version "8.10.2"
    // id 'org.jetbrains.kotlin.jvm'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation("io.quarkus:quarkus-smallrye-openapi")
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-cache'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest-client-jackson'
    implementation 'io.quarkus:quarkus-reactive-routes'
    // cache
    implementation 'io.quarkus:quarkus-cache'
    implementation 'io.quarkus:quarkus-redis-cache'
    implementation 'io.quarkus:quarkus-redis-client'
    // security
    implementation 'io.quarkus:quarkus-smallrye-jwt'
    implementation 'io.quarkus:quarkus-smallrye-jwt-build'
    // messaging
    implementation 'io.quarkus:quarkus-messaging-kafka'
    implementation 'io.quarkus:quarkus-kafka-client'
    // orm
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-hibernate-envers'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'org.postgresql:postgresql'
    //
    implementation 'org.mapstruct:mapstruct:1.6.2'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
    // OTEL
    implementation 'io.quarkus:quarkus-opentelemetry'
    implementation 'io.opentelemetry.instrumentation:opentelemetry-jdbc'
    implementation 'io.quarkus:quarkus-micrometer'
    implementation 'io.quarkus:quarkus-micrometer-registry-prometheus'
    implementation 'io.quarkus:quarkus-smallrye-health'
    // for debugging
    implementation 'io.opentelemetry:opentelemetry-exporter-logging'
    // scheduler
    implementation 'io.quarkus:quarkus-scheduler'
    //
    compileOnly 'org.projectlombok:lombok'
    //
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'io.rest-assured:rest-assured'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
    testImplementation 'io.quarkus:quarkus-jacoco'
    // implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

group 'com.example.demo'
version '1.0.0-SNAPSHOT'

java {
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
//    finalizedBy jacocoTestReport
//    jacoco {
//        excludeClassLoaders = ["*QuarkusClassLoader"]
//        destinationFile = layout.buildDirectory.file("jacoco-quarkus.exec").get().asFile
//    }
//    jacocoTestReport.enabled = false
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
//kotlin {
//    jvmToolchain(21)
//}

jacocoTestCoverageVerification {
    executionData.setFrom("$project.buildDir/jacoco-quarkus.exec")
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.72
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/example/excluded/**/*"
            ])
        }))
    }
}
check.dependsOn jacocoTestCoverageVerification