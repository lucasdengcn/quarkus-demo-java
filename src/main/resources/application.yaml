quarkus:
  application:
    name: demo-app
  profile:
    dev
  devservices:
    enabled: false
  native:
    resources:
      includes: publicKey.pem
  http:
    port: 8080
    auth:
      proactive: true #
    #access-log:
    #  pattern:
  # OAS
  swagger-ui:
    always-include: true
    theme: material
  smallrye-openapi:
    management:
      enabled: false
  # logging
  log:
    level: INFO
    console:
      format: "%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n"
    category:
      io.quarkus.vertx.http.access:
        level: DEBUG
      org.hibernate:
        level: DEBUG
  # datasource
  datasource:
    devservices:
      enabled: false
    health:
      enabled: true
    metrics:
      enabled: true
    #
    db-kind: postgresql
    username: postgres
    password: pgdev01
    #
    jdbc:
      enable-metrics: true
      initial-size: 5
      telemetry: true
      min-size: 5
      max-size: 10
      validate-on-borrow: true
      pooling-enabled: true
      url: jdbc:postgresql://localhost:15432/postgres?currentSchema=demo-service&autoReconnect=true&serverTimezone=UTC&characterEncoding=utf-8&allowMultiQueries=true&stringtype=unspecified
      validation-query-sql: SELECT NOW()
  # orm
  hibernate-orm:
    statistics: true
    physical-naming-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    metrics:
      enabled: true
    validation:
      enabled: true
    database:
      generation: none
    flush:
      mode: auto
    log:
      sql: true
      queries-slower-than-ms: 1000
  # redis
  redis:
    hosts: redis://localhost:6379/0
    max-pool-size: 5
    timeout: 5s
    orders:
      timeout: 10s
  # cache
  cache:
    type: redis
    redis:
      expire-after-write: 300s
      orders-cache:
        prefix: orders
        value-type: com.example.demo.model.Order
      posts-cache:
        prefix: posts
        value-type: com.example.demo.integration.model.FakePost
  # REST Client
  rest-client:
    logging:
      scope: request-response
      body-limit: 50
    fake-post-client:
      url: https://jsonplaceholder.typicode.com
      scope: jakarta.inject.Singleton
  # OTEL
  otel:
    resource:
      attributes: deployment.environment=dev,service.name=demo-orders,service.namespace=demo
    metrics:
      enabled: true
      exporter: logging # otlp
    traces:
      enabled: true
      eusp:
        enabled: true
      sampler: traceidratio
      sampler.arg: 1.0
      exporter: logging # otlp
    metric:
      export:
        interval: 1000ms
    # for dev/sit/uat/prod
    #exporter:
    #  otlp:
    #    endpoint: http://localhost:4317
  # metrics
  management:
    enabled: true
  micrometer:
    export:
      json:
        enabled: true
        path: metrics/json
      prometheus:
        path: metrics/prometheus
# kafka
kafka:
  group:
    id: demoService-orders
  bootstrap:
    servers: localhost:39192
smallrye:
  messaging:
    observation:
      enabled: true
# messaging
mp:
  jwt:
    verify:
      publickey:
        location: publicKey.pem
        algorithm: RS256
      issuer: https://example.com/issuer
      audiences: demo-app
      age: 600
  messaging:
    connector:
      smallrye-kafka:
        client-id-prefix: orders
        # producer
        retries: 3
        acks: 1
        max-inflight-messages: 10
        # consumer
        enable.auto.commit: false
        auto.offset.reset: latest
        retry-max-wait: 10
        #failure-strategy: dead-letter-queue
        max.poll.records: 1000
        isolation.level: read_committed
    incoming:
      ordersIn:
        connector: smallrye-kafka
        topic: demoService-orders
        #dead-letter-queue:
        #  topic: demoService-orders-dlq
        value:
          deserializer: com.example.demo.messaging.serde.OrderMessageDeserializer
    outgoing:
      ordersOut:
        connector: smallrye-kafka
        transactional.id: demoService-orders-${quarkus:uuid}
        value:
          serializer: io.quarkus.kafka.client.serialization.ObjectMapperSerializer